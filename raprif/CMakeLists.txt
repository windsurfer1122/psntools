## https://cmake.org/cmake/help/latest/index.html
CMAKE_MINIMUM_REQUIRED(VERSION 3.13)
## 3.0: Basis, PROJECT(VERSION)
## 3.1: TARGET_SOURCES()
## 3.4: GNUInstallDirs "usr/", target property WINDOWS_EXPORT_ALL_SYMBOLS
## 3.11: ADD_LIBRARY() without sources
## 3.13: TARGET_SOURCES() relative

## Define project
PROJECT(raprif
	VERSION 1.0.0
	LANGUAGES C
)
SET(raprif_VERSION "${raprif_VERSION}" PARENT_SCOPE)

## Log some properties for project
MESSAGE(STATUS "Project: ${PROJECT_NAME} ${PROJECT_VERSION}")
MESSAGE(VERBOSE "++ PROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR}")
MESSAGE(VERBOSE "++ PROJECT_BINARY_DIR=${PROJECT_BINARY_DIR}")

## Define C environment
INCLUDE(GNUInstallDirs)
MESSAGE(DEBUG "++ CMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}")
MESSAGE(DEBUG "++ CMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}")
MESSAGE(DEBUG "++ CMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}")
SET(RAPRIF_C_OUTPUT_DIR "target-c")
SET(RAPRIF_C_OUTPUT_PATH "${CMAKE_BINARY_DIR}/${RAPRIF_C_OUTPUT_DIR}")
MESSAGE(VERBOSE "++ RAPRIF_C_OUTPUT_PATH=${RAPRIF_C_OUTPUT_PATH}")


## >>>>> Define TARGET for C library
## https://cgold.readthedocs.io/en/latest/tutorials/libraries/static-shared.html
ADD_LIBRARY("${PROJECT_NAME}")

## Define properties for C library
SET_TARGET_PROPERTIES("${PROJECT_NAME}"
	PROPERTIES
		BUILD_WITH_INSTALL_RPATH TRUE
		LIBRARY_OUTPUT_DIRECTORY "${RAPRIF_C_OUTPUT_PATH}/lib"
		ARCHIVE_OUTPUT_DIRECTORY "${RAPRIF_C_OUTPUT_PATH}/lib"
		RUNTIME_OUTPUT_DIRECTORY "${RAPRIF_C_OUTPUT_PATH}/bin"
		WINDOWS_EXPORT_ALL_SYMBOLS YES CACHE BOOL
		## Define public headers (must be explicitly defined for install)
		PUBLIC_HEADER
			"include/${PROJECT_NAME}.h"
		## Add custom properties
		INCLUDE_OUTPUT_PATH "${RAPRIF_C_OUTPUT_PATH}/include"
)

## Define source files (explicitly!) for C library
TARGET_SOURCES("${PROJECT_NAME}"
	PRIVATE
		"src/${PROJECT_NAME}.c"
	INTERFACE
		"include/${PROJECT_NAME}.h"
)

## Define include directories for C library
TARGET_INCLUDE_DIRECTORIES("${PROJECT_NAME}"
	PUBLIC
		"include"
)

## Define install for C library
INSTALL(
	TARGETS "${PROJECT_NAME}"
		DESTINATION
			LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${CMAKE_PROJECT_NAME}"
			ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}/${CMAKE_PROJECT_NAME}"
			PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${CMAKE_PROJECT_NAME}"
)

## Log some properties for C library
GET_TARGET_PROPERTY(RAPRIF_INCDIRS "${PROJECT_NAME}" INCLUDE_DIRECTORIES)
GET_TARGET_PROPERTY(RAPRIF_SRCS "${PROJECT_NAME}" SOURCES)
GET_TARGET_PROPERTY(RAPRIF_INTF_SRCS "${PROJECT_NAME}" INTERFACE_SOURCES)
GET_TARGET_PROPERTY(RAPRIF_INTF_INCDIRS "${PROJECT_NAME}" INTERFACE_INCLUDE_DIRECTORIES)
#
MESSAGE(VERBOSE "++ INCLUDE_DIRECTORIES=${RAPRIF_INCDIRS}")
MESSAGE(VERBOSE "++ SOURCES=${RAPRIF_SRCS}")
MESSAGE(VERBOSE "++ INTERFACE_INCLUDE_DIRECTORIES=${RAPRIF_INTF_INCDIRS}")
MESSAGE(VERBOSE "++ INTERFACE_SOURCES=${RAPRIF_INTF_SRCS}")


## >>>>> Define TARGET for C includes
ADD_CUSTOM_TARGET("${PROJECT_NAME}-includes"
	ALL
)

## Define target dependencies for C includes
ADD_DEPENDENCIES("${PROJECT_NAME}-includes"
	"${PROJECT_NAME}"
)

## Define copy command for C includes
ADD_CUSTOM_COMMAND(TARGET "${PROJECT_NAME}-includes"
	POST_BUILD
	COMMENT "Copying ${PROJECT_NAME} C include directory to C build tree"
	WORKING_DIRECTORY "${RAPRIF_C_OUTPUT_PATH}"
	COMMAND "${CMAKE_COMMAND}" -E copy_directory "${PROJECT_SOURCE_DIR}/include" "include"
	VERBATIM
)


## Add Python optimized (SWIG) wrappers project
IF(NOT BUILD_SHARED_LIBS)
	INCLUDE("python/CMakeLists.txt")
ENDIF(NOT BUILD_SHARED_LIBS)

## Add SWIG project
IF(NOT BUILD_SHARED_LIBS AND CUSTOM_BUILD_SWIG)
	INCLUDE("swig/CMakeLists.txt")
ENDIF(NOT BUILD_SHARED_LIBS AND CUSTOM_BUILD_SWIG)
